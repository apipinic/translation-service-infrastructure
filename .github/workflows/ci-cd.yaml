name: Build and Push Docker Images

on:
  push:
    paths:
      - 'application/**'
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Log in to GHCR
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Debugging-Schritt nach Build
      - name: Debug Environment Variables
        run: |
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}"
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}"
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}"
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}"


      # 3. Build and Push Login Translation Service
      - name: Build and Push Login Translation Service
        working-directory: ./application/login-service
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)  # Commit Hash als Tag
          docker build \
            --build-arg SECRET_KEY=${{ secrets.SECRET_KEY }} \
            --build-arg JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            --build-arg GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            --build-arg GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            -t ghcr.io/${{ github.repository_owner }}/login-translation-service:$IMAGE_TAG .
          docker push ghcr.io/${{ github.repository_owner }}/login-translation-service:$IMAGE_TAG


      # 4. Build and Push Translation Service
      - name: Build and Push Translation Service
        working-directory: ./application/translation-service
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)  # Commit Hash als Tag
          docker build \
            --build-arg SECRET_KEY=${{ secrets.SECRET_KEY }} \
            --build-arg JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            --build-arg S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
            --build-arg DYNAMODB_TABLE=${{ secrets.DYNAMODB_TABLE }} \
            -t ghcr.io/${{ github.repository_owner }}/translation-service:$IMAGE_TAG .
          docker push ghcr.io/${{ github.repository_owner }}/translation-service:$IMAGE_TAG

      - name: Install yq
        run: |
          # Installiere yq (falls nicht bereits verfügbar)
          wget https://github.com/mikefarah/yq/releases/download/v4.15.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Update values.yaml with New Image Tag using yq
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)  # Commit Hash als Tag
          echo "Using IMAGE_TAG: $IMAGE_TAG"  # Debugging: Print the IMAGE_TAG

          # Debugging: Zeige den aktuellen Inhalt von values.yaml an, bevor wir es ändern
          echo "Current content of values.yaml:"
          cat k8s_multi/translation-service/values.yaml

          # Update values.yaml using yq
          yq eval ".loginService.image = \"ghcr.io/${{ github.repository_owner }}/login-translation-service:$IMAGE_TAG\"" -i k8s_multi/translation-service/values.yaml
          yq eval ".translationService.image = \"ghcr.io/${{ github.repository_owner }}/translation-service:$IMAGE_TAG\"" -i k8s_multi/translation-service/values.yaml

          # Debugging: Zeige den aktualisierten Inhalt von values.yaml an
          echo "Updated content of values.yaml after yq:"
          cat k8s_multi/translation-service/values.yaml

          # Stage the updated values.yaml
          git add k8s_multi/translation-service/values.yaml

          # Git-Status prüfen
          echo "Git status after adding the file:"
          git status

          # Set up Git user name and email
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Commit the changes
          git commit -a -m "Update Docker image tag to $IMAGE_TAG" || echo "No changes to commit"

          # Set up git with PAT for pushing changes
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}
          
          # Push the changes
          echo "Pushing changes to GitHub..."
          git push origin HEAD:main

          # Debugging: Überprüfe den Commit-Log nach dem Push
          echo "Git log after push:"
          git log -n 1 --oneline

